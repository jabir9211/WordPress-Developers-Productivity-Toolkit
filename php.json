{
	"Register Product Custom Post Type": {
        "prefix": "jr_cpt",
        "body": [
            "// Product Custom Post Type",
            "function product_init() {",
            "    // set up product labels",
            "    $$labels = array(",
            "        'name' => '${1:Products}',",
            "        'singular_name' => '${2:Product}',",
            "        'add_new' => 'Add New ${2:Product}',",
            "        'add_new_item' => 'Add New ${2:Product}',",
            "        'edit_item' => 'Edit ${2:Product}',",
            "        'new_item' => 'New ${2:Product}',",
            "        'all_items' => 'All ${1:Products}',",
            "        'view_item' => 'View ${2:Product}',",
            "        'search_items' => 'Search ${1:Products}',",
            "        'not_found' =>  'No ${1:Products} Found',",
            "        'not_found_in_trash' => 'No ${1:Products} found in Trash',", 
            "        'parent_item_colon' => '',",
            "        'menu_name' => '${1:Products}',",
            "    );",
            "",
            "    // register post type",
            "    $$args = array(",
            "        'labels' => $$labels,",
            "        'public' => true,",
            "        'has_archive' => true,",
            "        'show_ui' => true,",
            "        'capability_type' => 'post',",
            "        'hierarchical' => false,",
            "        'rewrite' => array('slug' => 'product'),",
            "        'query_var' => true,",
            "        'menu_icon' => 'dashicons-randomize',",
            "        'supports' => array(",
            "            'title',",
            "            'editor',",
            "            'excerpt',",
            "            'trackbacks',",
            "            'custom-fields',",
            "            'comments',",
            "            'revisions',",
            "            'thumbnail',",
            "            'author',",
            "            'page-attributes'",
            "        )",
            "    );",
            "    register_post_type( 'product', $$args );",
            "",
            "    // register taxonomy",
            "    register_taxonomy('product_category', 'product', array('hierarchical' => true, 'label' => 'Category', 'query_var' => true, 'rewrite' => array( 'slug' => 'product-category' )));",
            "}",
            "add_action( 'init', 'product_init' );"
        ],
        "description": "Register a Custom Post Type for Products"
    }
	
	"Enqueue Scripts and Styles": {
        "prefix": "jr_scripts",
        "body": [
            "function jr_enqueue_scripts() {",
            "    //style",            
            "    wp_enqueue_style('main-css', get_theme_file_uri('/style.css'));",
            "    //scripts",
            "    wp_enqueue_script('jq-js', get_theme_file_uri('/js/jquery-3.3.1.min.js'), array('jquery'), '1.0', true);",
            "}",
            "add_action('wp_enqueue_scripts', 'jr_enqueue_scripts');"
        ],
        "description": "Enqueue Scripts and Styles"
    }

    "ACF Variable": {
        "prefix": "jr_acf_variable",
        "body": [
            "$${1:variable_name} = (get_field('${2:field_name}') && get_field('${2:field_name}') != '') ? get_field('${2:field_name}') : '';"
        ],
        "description": "Create a variable using Advanced Custom Fields"
    }
    "Title Function": {
        "prefix": "jr_title",
        "body": [
            "the_title();"
        ],
        "description": "Output the title of the post"
    }
    "Content Function": {
        "prefix": "jr_content",
        "body": [
            "the_content();"
        ],
        "description": "Output the content of the post"
    }
    "Excerpt Function": {
        "prefix": "jr_excerpt",
        "body": [
            "the_excerpt();"
        ],
        "description": "Output the excerpt of the post"
    }
    "Permalink Function": {
        "prefix": "jr_permalink",
        "body": [
            "the_permalink();"
        ],
        "description": "Output the permalink of the post"
    }   
    "Thumbnail Function": {
        "prefix": "jr_thumbnail_url",
        "body": [
            "get_the_post_thumbnail_url();"
        ],
        "description": "Output the thumbnail url of the post"
    }
    "Page template Function": {
        "prefix": "jr_page_template",
        "body": [
            "<?php",
            "//Template Name: Add Template Name",
            "get_header();",
            "get_footer();"
        ],
        "description": "Output the Page template of the post"
    }
    "Site Url Function": {
        "prefix": "jr_site_url",
        "body": [
            "site_url();"
        ],
        "description": "Output the Site Url of the post"
    }
    "WP_Query Loop": {
        "prefix": "jr_query",
        "body": [
            "$$the_query = new WP_Query( $$args );",
            "",
            "// The Loop",
            "if ( $$the_query->have_posts() ) :",
            "    while ( $$the_query->have_posts() ) : $$the_query->the_post();",
            "        // Do Stuff",
            "    endwhile;",
            "endif;",
            "",
            "// Reset Post Data",
            "wp_reset_postdata();"
        ],
        "description": "Create a new WP_Query loop"
    }
    "Add Options Page": {
        "prefix": "jr_option_menu",
        "body": [
            "// Add the options page to the admin menu",
            "function my_custom_options_page() {",
            "    add_menu_page(",
            "        '${1:Custom Options}',          // Page title",
            "        '${1:Custom Options}',          // Menu title",
            "        'manage_options',               // Capability",
            "        '${2:custom-options}',          // Menu slug",
            "        '${3:my_custom_options_page_html}', // Callback function",
            "        'dashicons-admin-generic',      // Icon URL",
            "        ${4:20}                         // Position",
            "    );",
            "}",
            "add_action('admin_menu', 'my_custom_options_page');"
        ],
        "description": "Add a custom options page to the admin menu"
    }
    "WordPress Latest Posts Shortcode Function": {
        "prefix": "jr_latestPosts_shortcode",
        "body": [
            "function display_latest_posts($$atts) {",
            "    // Extract shortcode attributes, with defaults",
            "    $$atts = shortcode_atts(array(",
            "        'posts_per_page' => 5,",
            "    ), $$atts, 'latest_posts');",
            "",
            "    // Query to get the latest posts",
            "    $$query = new WP_Query(array(",
            "        'posts_per_page' => $$atts['posts_per_page'],",
            "        'post_status' => 'publish',",
            "    ));",
            "",
            "    // Initialize the output",
            "    $$output = '<div class=\"latest-posts\">';",
            "",
            "    // Loop through the posts",
            "    if ($$query->have_posts()) {",
            "        while ($$query->have_posts()) {",
            "            $$query->the_post();",
            "            $$output .= '<div class=\"post-item\">';",
            "            $$output .= '<h2><a href=\"' . get_permalink() . '\">' . get_the_title() . '</a></h2>';",
            "            $$output .= '<div class=\"post-excerpt\">' . get_the_excerpt() . '</div>';",
            "            $$output .= '</div>';",
            "        }",
            "        wp_reset_postdata();",
            "    } else {",
            "        $$output .= '<p>No posts found.</p>';",
            "    }",
            "",
            "    $$output .= '</div>';",
            "",
            "    return $$output;",
            "}",
            "",
            "function register_latest_posts_shortcode() {",
            "    add_shortcode('latest_posts', 'display_latest_posts');",
            "}",
            "add_action('init', 'register_latest_posts_shortcode');"
        ],
        "description": "Create a shortcode to display the latest posts in WordPress"
    }
    "Print R Function": {
        "prefix": "jr_print_r",
        "body": [
            "echo \"<pre>\";print_r();echo \"</pre>\";",
        ],
        "description": "Prints the content in a readable format and helpfull for debugging code."
    }
    "ACF Repeater":{
        "prefix": "jr_acf_repeater",
        "body": [
            "// Check rows exists.",
            "if( have_rows('${1:repeater_field_name}') ):",
            "",
            "    // Loop through rows.",
            "    while( have_rows('${1:repeater_field_name}') ) : the_row();",
            "",
            "        // Load sub field value.",
            "        $${2:sub_value} = get_sub_field('${3:sub_field}');",
            "        // Do something, but make sure you escape the value if outputting directly...",
            "",
            "    // End loop.",
            "    endwhile;",
            "",
            "// No value.",
            "else :",
            "    // Do something...",
            "endif;"
        ],
        "description": "Check and display ACF repeater field"
    }
    "Custom Meta Box":{
        "prefix": "jr_meta_box",
        "body": [
            "// Hook to add meta box",
            "add_action('add_meta_boxes', 'custom_meta_box');",
            "",
            "function custom_meta_box() {",
            "    // Add a meta box to the '${1:post}' post type (change 'post' to your custom post type slug if needed)",
            "    add_meta_box(",
            "        'custom_meta_box_id',         // Unique ID for the meta box",
            "        '${2:Custom Meta Box Title}',      // Meta box title",
            "        'custom_meta_box_callback',   // Callback function to display the meta box content",
            "        '${1:post}',                       // Post type where the meta box should appear",
            "        'normal',                     // Context (normal, side, or advanced)",
            "        'high'                        // Priority",
            "    );",
            "}",
            "",
            "// Callback function to display the meta box content",
            "function custom_meta_box_callback($$post) {",
            "    // Add a nonce field for security",
            "    wp_nonce_field('custom_meta_box_nonce_action', 'custom_meta_box_nonce_name');",
            "    ",
            "    // Get existing value from the database",
            "    $${3:meta_value} = get_post_meta($$post->ID, '_custom_meta_key', true);",
            "",
            "    // Display the form field for the meta box",
            "    echo '<label for=\"custom_meta_field\">${4:Custom Field}:</label>';",
            "    echo '<input type=\"text\" id=\"custom_meta_field\" name=\"custom_meta_field\" value=\"' . esc_attr($$meta_value) . '\" />';",
            "}",
            "",
            "// Hook to save meta data when the post is saved",
            "add_action('save_post', 'save_custom_meta_box_data');",
            "",
            "function save_custom_meta_box_data($$post_id) {",
            "    // Check if nonce is set",
            "    if (!isset($_POST['custom_meta_box_nonce_name'])) {",
            "        return $$post_id;",
            "    }",
            "",
            "    // Verify nonce for security",
            "    $${5:nonce} = $_POST['custom_meta_box_nonce_name'];",
            "    if (!wp_verify_nonce($$nonce, 'custom_meta_box_nonce_action')) {",
            "        return $$post_id;",
            "    }",
            "",
            "    // Check autosave",
            "    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {",
            "        return $$post_id;",
            "    }",
            "",
            "    // Check user permissions",
            "    if ('${1:post}' === $_POST['post_type']) { // Change 'post' to your custom post type slug if needed",
            "        if (!current_user_can('edit_post', $$post_id)) {",
            "            return $$post_id;",
            "        }",
            "    }",
            "",
            "    // Sanitize and save the custom field data",
            "    if (isset($_POST['custom_meta_field'])) {",
            "        $${6:sanitized_value} = sanitize_text_field($_POST['custom_meta_field']);",
            "        update_post_meta($$post_id, '_custom_meta_key', $$sanitized_value);",
            "    } else {",
            "        delete_post_meta($$post_id, '_custom_meta_key');",
            "    }",
            "}"
        ],
        "description": "Sample code for creating a custom meta box in WordPress"
    }
    "ajax callback for functions.php":{
        "prefix": "jr_ajax_callback",
        "body": [
            "// Callback function for AJAX request",
            "function ${1:jr_filter_ajax_callback}() {",
            "    wp_die(); // This is required to terminate immediately and return a proper response",
            "}",
            "// Register AJAX actions for logged in and logged out users",
            "add_action('wp_ajax_${2:filter_posts}', '${1:jr_filter_ajax_callback}');",
            "add_action('wp_ajax_nopriv_${2:filter_posts}', '${1:jr_filter_ajax_callback}');"
        ],
        "description": "Sample code for callback function of AJAX in WordPress"
    }
    "Sample code for Display Posts":{
        "prefix": "jr_display_posts",
        "body": [
            "// Define the custom query arguments",
            "$$args = array(",
            "    'post_type' => '${1:books}', // Custom post type",
            "    'posts_per_page' => ${2:10}, // Number of posts to display",
            ");",
            "",
            "// Execute the custom query",
            "$$custom_query = new WP_Query($$args);",
            "",
            "// Check if there are any posts to display",
            "if ($$custom_query->have_posts()) :",
            "",
            "    echo '<div class=\"custom-posts-container\">'; // Container for custom posts",
            "",
            "    // The Loop",
            "    while ($$custom_query->have_posts()) : $$custom_query->the_post();",
            "        echo '<div class=\"custom-post\">';",
            "        echo '<h2>' . get_the_title() . '</h2>'; // Display the title",
            "        echo '<div class=\"custom-post-content\">' . get_the_excerpt() . '</div>'; // Display the excerpt",
            "        echo '<a href=\"' . get_permalink() . '\">Read More</a>'; // Read More link",
            "        echo '</div>';",
            "    endwhile;",
            "",
            "    echo '</div>';",
            "",
            "else :",
            "",
            "    // If no posts are found",
            "    echo '<p>No posts found</p>';",
            "",
            "endif;",
            "",
            "// Reset Post Data",
            "wp_reset_postdata();"
        ],
        "description": "Display posts from a custom post type. Change the 'post_type' slug for your custom post type."
    }
    "Woo Add Custom Fees":{
        "prefix": "jr_woo_add_fees",
        "body": [
            "// Add extra fee for shipping",
            "add_action('woocommerce_cart_calculate_fees', 'add_shipping_extra_fee');",
            "",
            "function add_shipping_extra_fee() {",
            "    // Check if shipping is chosen and a shipping method is selected",
            "    if (is_admin() && !defined('DOING_AJAX')) {",
            "        return;",
            "    }",
            "",
            "    // Define the fee amount",
            "    $${1:fee_amount} = ${2:50}; // $50 fee",
            "",
            "    // Add the fee",
            "    WC()->cart->add_fee(__('${3:Shipping Charge}', 'woocommerce'), $${1:fee_amount});",
            "}"
        ],
        "description": "Add extra fees in WooCommerce for custom requirements"
    }
    "Display Acf Nested Repeater Field":{
        "prefix": "jr_acf_double_repeater",
        "body": [
            "if( have_rows('${1:parent_repeater}') ): ?>",
            "    <div class=\"parent-repeater\">",
            "        <?php while( have_rows('${1:parent_repeater}') ): the_row(); ",
            "            // Sub field value",
            "            $${2:sub_field_1} = get_sub_field('${3:sub_field_1}');?>",
            "",
            "            <div class=\"parent-repeater-row\">",
            "                <h2><?php echo esc_html($$2); ?></h2>",
            "",
            "                <?php if( have_rows('${4:nested_repeater}') ): ?>",
            "                    <div class=\"nested-repeater\">",
            "                        <?php while( have_rows('${4:nested_repeater}') ): the_row(); ",
            "                            // Nested sub field values",
            "                            $${5:nested_sub_field_1} = get_sub_field('${6:nested_sub_field_1}');",
            "                            $${7:nested_sub_field_2} = get_sub_field('${8:nested_sub_field_2}');?>",
            "                            <div class=\"nested-repeater-row\">",
            "                                <p><?php echo esc_html($$5); ?></p>",
            "                                <p><?php echo esc_html($$7); ?></p>",
            "                            </div>",
            "                        <?php endwhile; ?>",
            "                    </div>",
            "                <?php endif; ?>",
            "            </div>",
            "        <?php endwhile; ?>",
            "    </div>",
            "<?php endif; ?>"
        ],
        "description": "Display nested ACF repeater fields"
    }
    "Remove the taxonomy base from URLs and customize permalink" :{
        "prefix": "jr_rewrite_term_slug",
        "body": [
            "// Code for removing slug of taxonomy from URL",
            "// For sample, we have used 'cars' as post type and 'cities' as taxonomy (you can change your own as required)",
            "// Add custom rewrite rules",
            "function custom_rewrite_rules() {",
            "    add_rewrite_rule(",
            "        '^([^/]+)/?$',
            "        'index.php?taxonomy=${1:cities}&term=$$matches[1]',",
            "        'top'",
            "    );",
            "",
            "    add_rewrite_rule(",
            "        '^([^/]+)/([^/]+)/?$',
            "        'index.php?${2:cities}=$$matches[1]&${3:cars}=$$matches[2]',",
            "        'top'",
            "    );",
            "}",
            "add_action('init', 'custom_rewrite_rules');",
            "",
            "// Remove taxonomy base from term links",
            "function custom_remove_taxonomy_base($$termlink, $$term, $$taxonomy) {",
            "    if ($$taxonomy === '${4:cities}') {",
            "        $$termlink = home_url('/' . $$term->slug . '/');",
            "    }",
            "    return $$termlink;",
            "}",
            "add_filter('term_link', 'custom_remove_taxonomy_base', 10, 3);",
            "",
            "// Adjust permalink structure for custom post type 'cars'",
            "function custom_post_type_permalink($$post_link, $$post) {",
            "    if ($$post->post_type === '${5:cars}') {",
            "        $$terms = wp_get_post_terms($$post->ID, '${6:cities}');",
            "        if (!is_wp_error($$terms) && !empty($$terms) && is_object($$terms[0])) {",
            "            return home_url('/' . $$terms[0]->slug . '/' . $$post->post_name . '/');",
            "        }",
            "    }",
            "    return $$post_link;",
            "}",
            "add_filter('post_type_link', 'custom_post_type_permalink', 10, 2);",
            "//make sure after all this code never forget to flush the permalink"
        ],
        "description": "Remove the taxonomy base from URLs and customize permalink structure for SEO or other needs."
    }
    "Shortcut for adding custom column in posttype list":{
        "prefix": "jr_add_column",
        "body": [
            "// Add custom columns to the 'cars' post type list table",
            "function add_custom_columns($$columns) {",
            "    $$columns['custom_column'] = __('Custom Column', 'text_domain');",
            "    return $$columns;",
            "}",
            "add_filter('manage_cars_posts_columns', 'add_custom_columns');",
            "",
            "// Populate the custom column with data",
            "function display_custom_column_data($$column, $$post_id) {",
            "    if ($$column === 'custom_column') {",
            "        // Fetch and display any custom meta field",
            "        $$custom_value = get_post_meta($$post_id, '_custom_meta_key', true);",
            "        echo esc_html($$custom_value);",
            "    }",
            "}",
            "add_action('manage_cars_posts_custom_column', 'display_custom_column_data', 10, 2);"
        ],
        "description": "This code helps developers add a custom column to the list table of a custom post type."
    }
    "Code for plugins required code":{
        "prefix": "jr_start_plugin",
        "body": [
            "/**",
            " * Plugin Name: ${1:Your Plugin Name}",
            " * Plugin URI: ${2:http://example.com/your-plugin}",
            " * Description: ${3:A brief description of what your plugin does.}",
            " * Version: ${4:1.0.0}",
            " * Author: ${5:Your Name}",
            " * Author URI: ${6:http://example.com}",
            " * License: GPLv2 or later",
            " * Text Domain: ${7:your-plugin-textdomain}",
            " */",
            "",
            "// Prevent direct access",
            "if (!defined('ABSPATH')) {",
            "    exit;",
            "}",
            "",
            "// Define plugin constants",
            "define('${8:YOUR_PLUGIN_VERSION}', '${4:1.0.0}');",
            "define('${9:YOUR_PLUGIN_NAME}', '${10:your-plugin-name}');",
            "define('${11:YOUR_PLUGIN_DIR}', plugin_dir_path(__FILE__));",
            "define('${12:YOUR_PLUGIN_URL}', plugin_dir_url(__FILE__));",
            "",
            "// Include required files",
            "require_once ${11:YOUR_PLUGIN_DIR} . 'includes/class-your-plugin.php';",
            "",
            "// Initialize the plugin",
            "function ${13:your_plugin_init}() {",
            "    // Load text domain for translations",
            "    load_plugin_textdomain('${7:your-plugin-textdomain}', false, basename(dirname(__FILE__)) . '/languages');",
            "",
            "    // Instantiate the main plugin class",
            "    $$plugin = new ${14:Your_Plugin}();",
            "}",
            "add_action('plugins_loaded', '${13:your_plugin_init}');",
            "",
            "// Activation hook",
            "function ${15:your_plugin_activate}() {",
            "    ${14:Your_Plugin}::activate();",
            "}",
            "register_activation_hook(__FILE__, '${15:your_plugin_activate}');",
            "",
            "// Deactivation hook",
            "function ${16:your_plugin_deactivate}() {",
            "    ${14:Your_Plugin}::deactivate();",
            "}",
            "register_deactivation_hook(__FILE__, '${16:your_plugin_deactivate}');",
            "",
            "// Enqueue scripts and styles",
            "function ${17:your_plugin_enqueue_scripts}() {",
            "    wp_enqueue_style('${18:your-plugin-styles}', ${12:YOUR_PLUGIN_URL} . 'assets/css/your-plugin-styles.css');",
            "    wp_enqueue_script('${19:your-plugin-scripts}', ${12:YOUR_PLUGIN_URL} . 'assets/js/your-plugin-scripts.js', array('jquery'), ${8:YOUR_PLUGIN_VERSION}, true);",
            "}",
            "add_action('wp_enqueue_scripts', '${17:your_plugin_enqueue_scripts}');"
        ],
        "description": "This code provides a boilerplate for creating a WordPress plugin."
    }
    "Code For Display Posts with Pagination":{
        "prefix": "jr_posts_with_pagination",
        "body": [
            "// Set up pagination variables",
            "$$paged = (get_query_var('paged')) ? get_query_var('paged') : 1;",
            "",
            "//Make sure do not forget to change slug name according to your cpt",
            "// Custom query to fetch products",
            "$$args = array(",
            "    'post_type' => 'cars',",
            "    'posts_per_page' => 10, // Number of products per page",
            "    'paged' => $$paged,",
            ");",
            "$$products_query = new WP_Query($$args);",
            "",
            "// The Loop",
            "if ($$products_query->have_posts()) :",
            "    while ($$products_query->have_posts()) : $$products_query->the_post(); ?>",
            "",
            "        <article id=\"post-<?php the_ID(); ?>\" <?php post_class(); ?>>",
            "            <header class=\"entry-header\">",
            "                <h2 class=\"entry-title\"><?php the_title(); ?></h2>",
            "            </header>",
            "            <div class=\"entry-content\">",
            "                <?php the_content(); ?>",
            "            </div>",
            "        </article>",
            "",
            "    <?php endwhile; ?>",
            "",
            "    <div class=\"pagination\">",
            "        <?php",
            "        echo paginate_links(array(",
            "            'total' => $$products_query->max_num_pages,",
            "            'current' => $$paged,",
            "            'format' => '?paged=%#%',",
            "            'prev_text' => __('« Previous'),",
            "            'next_text' => __('Next »'),",
            "        ));",
            "        ?>",
            "    </div>",
            "",
            "<?php else : ?>",
            "",
            "    <p><?php _e('No products found.', 'textdomain'); ?></p>",
            "",
            "<?php endif;",
            "wp_reset_postdata(); ?>",
        ],
        "description": "This code will display custom post type's post with pagination."
    }
    "Display Posts With Ajax Load More Pagination":{
        "prefix": "jr_posts_load_more",
        "body": [
            "// This is code for Display posts with load more pagination",
            "<div id=\"primary\" class=\"content-area\">",
            "    <main id=\"main\" class=\"site-main\">",
            "",
            "        <div id=\"posts-container\">",
            "            <?php",
            "            // Set up pagination variables",
            "            $$paged = (get_query_var('paged')) ? get_query_var('paged') : 1;",
            "",
            "            // Custom query to fetch products",
            "            $$args = array(",
            "                'post_type' => 'cars', // Change to your CPT",
            "                'posts_per_page' => 1, // Number of products per page",
            "                'paged' => $$paged,",
            "            );",
            "            $$products_query = new WP_Query($$args);",
            "",
            "            // The Loop",
            "            if ($$products_query->have_posts()) :",
            "                while ($$products_query->have_posts()) : $$products_query->the_post(); ?>",
            "",
            "                    <article id=\"post-<?php the_ID(); ?>\" <?php post_class(); ?>>",
            "                        <header class=\"entry-header\">",
            "                            <h2 class=\"entry-title\"><?php the_title(); ?></h2>",
            "                        </header>",
            "                        <div class=\"entry-content\">",
            "                            <?php the_content(); ?>",
            "                        </div>",
            "                    </article>",
            "",
            "                <?php endwhile;",
            "            else : ?>",
            "",
            "                <p><?php _e('No products found.', 'textdomain'); ?></p>",
            "",
            "            <?php endif; ?>",
            "",
            "            <?php wp_reset_postdata(); ?>",
            "        </div>",
            "",
            "        <?php if ($$products_query->max_num_pages > 1) : ?>",
            "            <div class=\"load-more-container\">",
            "                <button id=\"load-more\"><?php _e('Load More', 'textdomain'); ?></button>",
            "            </div>",
            "        <?php endif; ?>",
            "",
            "    </main>",
            "</div>",
            "",
            "<?php",
            "// This code should be put into functions.php",
            "// Load More code start from here",
            "// create js file and and localize ajax for use while load more click event",
            "function enqueue_load_more_scripts() {",
            "    wp_enqueue_script('load-more', get_template_directory_uri() . '/js/load-more.js', array('jquery'), null, true );",
            "",
            "    wp_localize_script('load-more', 'loadmore_params', array(",
            "        'ajaxurl' => admin_url('admin-ajax.php'),",
            "        'posts_per_page' => 1, // Number of posts per page",
            "    ));",
            "}",
            "add_action('wp_enqueue_scripts', 'enqueue_load_more_scripts');",
            "",
            "// This code should be put into functions.php",
            "// This code is callback function which returns the data",
            "function load_more_posts() {",
            "    $$paged = $$_POST['page'] + 1; // The current page being requested",
            "",
            "    $$args = array(",
            "        'post_type' => 'cars', // Change to your CPT",
            "        'posts_per_page' => $$_POST['posts_per_page'],",
            "        'paged' => $$paged,",
            "    );",
            "",
            "    $$products_query = new WP_Query($$args);",
            "",
            "    if ($$products_query->have_posts()) :",
            "        while ($$products_query->have_posts()) : $$products_query->the_post(); ?>",
            "",
            "            <article id=\"post-<?php the_ID(); ?>\" <?php post_class(); ?>>",
            "                <header class=\"entry-header\">",
            "                    <h2 class=\"entry-title\"><?php the_title(); ?></h2>",
            "                </header>",
            "                <div class=\"entry-content\">",
            "                    <?php the_content(); ?>",
            "                </div>",
            "            </article>",
            "",
            "        <?php endwhile;",
            "        // Check if there are more posts",
            "        $$more_posts = $$products_query->max_num_pages > $$paged;",
            "        echo json_encode(array('content' => ob_get_clean(), 'more' => $$more_posts));",
            "    endif;",
            "",
            "    wp_reset_postdata();",
            "    die();",
            "}",
            "add_action('wp_ajax_loadmore', 'load_more_posts');",
            "add_action('wp_ajax_nopriv_loadmore', 'load_more_posts');",
            "",
            "// This part of code goes to the script file",
            "<script>",
            "jQuery(document).ready(function($){",
            "    var page = 0; // Start at page 1",
            "    var loading = false;",
            "",
            "    $('#load-more').on('click', function() {",
            "        if (!loading) {",
            "            loading = true;",
            "            page++;",
            "            $.ajax({",
            "                url: loadmore_params.ajaxurl,",
            "                type: 'POST',",
            "                data: {",
            "                    action: 'loadmore',",
            "                    page: page,",
            "                    posts_per_page: loadmore_params.posts_per_page,",
            "                },",
            "                success: function(response) {",
            "                    var data = JSON.parse(response);",
            "                    if (data.content) {",
            "                        $('#posts-container').append(data.content);",
            "                        loading = false;",
            "                        if (!data.more) {",
            "                            $('#load-more').hide(); // Hide the button when no more posts are available",
            "                        }",
            "                    } else {",
            "                        $('#load-more').hide(); // Hide the button when no more posts are available",
            "                    }",
            "                }",
            "            });",
            "        }",
            "    });",
            "});",
            "</script>"
        ],
        "description": "This code will display posts with AJAX on click load more pagination."
    }
    "Taxonomy filter code":{
        "prefix": "jr_filter_taxonomy",
        "body": [
          "// this code should be pasted in functions.php",
          "// this code will enqueue js file and localize nonce and ajax",
          "function enqueue_filter_scripts() {",
          "    wp_enqueue_script('ajax-filter', get_theme_file_uri('/js/ajax-filter.js'), array('jquery'), null, true );",
          "",
          "    wp_localize_script('ajax-filter', 'afp_vars', array(",
          "        'afp_nonce' => wp_create_nonce('afp_nonce'), // Create nonce which we later will use to verify AJAX request",
          "        'afp_ajax_url' => admin_url('admin-ajax.php')",
          "    ));",
          "}",
          "add_action('wp_enqueue_scripts', 'enqueue_filter_scripts');",
          "",
          "// this code should be pasted in functions.php",
          "// this code is callback function to filter the terms based on selected values",
          "function ajax_filter_products() {",
          "    check_ajax_referer('afp_nonce', 'afp_nonce');",
          "",
          "    // Check if the taxonomy and term_id are set, if not assign default values",
          "    $$taxonomy = isset($$_POST['taxonomy']) ? $$_POST['taxonomy'] : '';",
          "    $$term_id = isset($$_POST['term_id']) ? $$_POST['term_id'] : '';",
          "",
          "    $$args = array(",
          "        'post_type' => 'product',",
          "        'posts_per_page' => 10,",
          "    );",
          "",
          "    if ($$term_id) {",
          "        $$args['tax_query'] = array(",
          "            array(",
          "                'taxonomy' => $$taxonomy,",
          "                'field' => 'term_id',",
          "                'terms' => $$term_id,",
          "            ),",
          "        );",
          "    }",
          "",
          "    $$custom_query = new WP_Query($$args);",
          "",
          "    if ($$custom_query->have_posts()) :",
          "        while ($$custom_query->have_posts()) : $$custom_query->the_post();",
          "            echo '<div class=\"custom-post\">';",
          "            echo '<h2>' . get_the_title() . '</h2>'; // Display the title",
          "            echo '<div class=\"custom-post-content\">' . get_the_excerpt() . '</div>'; // Display the excerpt",
          "            echo '<a href=\"' . get_permalink() . '\">Read More</a>'; // Read More link",
          "            echo '</div>';",
          "        endwhile;",
          "    else :",
          "        echo '<p>No posts found</p>';",
          "    endif;",
          "",
          "    wp_die();",
          "}",
          "add_action('wp_ajax_filter_products', 'ajax_filter_products');",
          "add_action('wp_ajax_nopriv_filter_products', 'ajax_filter_products');",
          "?>",
          "",  
          "<script>",
          "// This is js code which should be in js file create file and paste it",
          "jQuery(function($) {",
          "    $('#product-category').change(function() {",
          "        var $taxonomy = $(this).data('taxonomy');",
          "        var $term_id = $(this).val();",
          "",
          "        $.ajax({",
          "            type: 'POST',",
          "            url: afp_vars.afp_ajax_url,",
          "            data: {",
          "                action: 'filter_products',",
          "                afp_nonce: afp_vars.afp_nonce,",
          "                taxonomy: $taxonomy,",
          "                term_id: $term_id,",
          "            },",
          "            success: function(response) {",
          "                $('.custom-posts-container').html(response);",
          "            }",
          "        });",
          "    });",
          "});",
          "</script>",
          "<!-- This code is for adding terms Dropdown Filter from the taxonomy -->",
          "<div class=\"jr-tax-filter\">",
          "    <?php",
          "    // get terms from taxonomy slug you can add your own taxonomy slug",
          "    $$terms = get_terms(array(",
          "        'taxonomy' => 'product_category',",
          "        'hide_empty' => false,",
          "    ));",
          "    // created dropdown if taxonomy has terms",
          "    if (!empty($$terms) && !is_wp_error($$terms)) {",
          "        echo '<select id=\"product-category\" data-taxonomy=\"product_category\">';",
          "        echo '<option value=\"\">' . __('Select Category', 'textdomain') . '</option>';",
          "        foreach ($$terms as $$term) {",
          "            echo '<option value=\"' . $$term->term_id . '\">' . $$term->name . '</option>';",
          "        }",
          "        echo '</select>';",
          "    }",
          "    ?>",
          "</div>",
          "<!-- This code you can paste it in page template shortcode anywhere -->",
          "<!-- code for display posts and after selecting term filtered data will display here -->",
          "<div class=\"custom-posts-container\">",
          "    <?php",
          "    // Define the custom query arguments",
          "    $$args = array(",
          "        'post_type' => 'product', // Custom post type",
          "        'posts_per_page' => 10, // Number of posts to display",
          "    );",
          "",
          "    // Execute the custom query",
          "    $$custom_query = new WP_Query($$args);",
          "",
          "    // Check if there are any posts to display",
          "    if ($$custom_query->have_posts()) :",
          "",
          "        echo '<div class=\"custom-posts-container\">'; // Container for custom posts",
          "",
          "        // The Loop",
          "        while ($$custom_query->have_posts()) : $$custom_query->the_post();",
          "            echo '<div class=\"custom-post\">';",
          "            echo '<h2>' . get_the_title() . '</h2>'; // Display the title",
          "            echo '<div class=\"custom-post-content\">' . get_the_excerpt() . '</div>'; // Display the excerpt",
          "            echo '<a href=\"' . get_permalink() . '\">Read More</a>'; // Read More link",
          "            echo '</div>';",
          "        endwhile;",
          "",
          "        echo '</div>';",
          "",
          "    else :",
          "",
          "        // If no posts are found",
          "        echo '<p>No posts found</p>';",
          "",
          "    endif;",
          "",
          "    // Reset Post Data",
          "    wp_reset_postdata();",
          "    ?>",
          "</div>"
        ],
        "description": "This code allows developers to create a custom filter for taxonomy using AJAX."
      }   
}
